service: auth-service

frameworkVersion: '2'
plugins:
  - serverless-bundle

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  memorySize: 256
  region: ap-southeast-1


functions:
  authorize:
    handler: src/handlers/authorize.handler
    cors: true
  privateEndpoint:
    handler: src/handlers/private.handler
    events:
      - http:
          path: /private
          method: POST
          authorizer: authorize
          cors: true

custom:
  bundle:
    linting: false

resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    ExpiredGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        ResponseTemplates:
          application/json: |
            {
              "success":false,
              "message": $context.authorizer.messageString
            }
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
            application/json: |
              {
                "success":false,
                "message":$context.authorizer.messageString
              }
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

    DenyFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
            application/json: |
              { "message": "$context.authorizer.Message" }
        ResponseType: ACCESS_DENIED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '403'

    MissingAuthGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
            application/json: |
              { "message": "$context.authorizer.Message" }
        ResponseType: MISSING_AUTHENTICATION_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '403'